import React, { Component } from "react";
import {
  Button,
  Form,
  Dropdown,
  Checkbox,
  Modal,
  Loader,
  List,
  Label,
  Input,
} from "semantic-ui-react";
import _ from "lodash";
import Graph from "react-graph-vis";
import cloneDeep from "lodash/cloneDeep";
import { v4 as uuidv4 } from "uuid";
import ReactSlider from "react-slider";
import * as XLSX from "xlsx";
import {
  Accordion,
  AccordionItem,
  AccordionItemHeading,
  AccordionItemButton,
  AccordionItemPanel,
} from "react-accessible-accordion";
import ReactTable from "react-table";

// Demo styles, see 'Styles' section below for some notes on use.
import "react-accessible-accordion/dist/fancy-example.css";

import withAuth from "../Connexion/withAuth";
import { getCookie, getCurrentDate } from "../Connexion/utils";

import "semantic-ui-css/semantic.min.css";
import "./custom.css";
import "react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css";

import bleu from "../imgs/bleu.png";
import rouge from "../imgs/rouge.png";
import vert from "../imgs/vert.png";
import jaune from "../imgs/jaune.png";
import noir from "../imgs/noir.png";
import violet from "../imgs/violet.png";

function fetchtimeout(ms, promise) {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      reject(new Error("timeout"));
    }, ms);
    promise.then(resolve, reject);
  });
}

class Graph_chaine extends Component {
  state = {
    nodes: [],
    edge: "",
    edges: [],
    grph: {},
    ff: uuidv4,
    filter: [],
    check: { 1: false, 2: false, 3: false },
    codes: "",
    nodeid: "",
    date: [],
    date1: "",
    date2: "",
    grouper: {},
    group: { 1: false },
    loader: "none",
    graphkey: uuidv4,
    text: {},
    operation_rows: [],
    operation_columns: [],
    open: false,
    ouvre: false,
    sourc: "",
    targ: "",
    ll: {},
    rct: [],
    montant: "",
    montants: {},
    label: {},
    range: 5,
    sens: "out",
    level: "level_2",
    solde: "",
    choice: "filtre_1",
    size: undefined,
    entr: "",
    cli: "",
    tcr: "",
    codes_cli: [],
    btnShow: "hidden",
    cardShow: "",
    dates: "",
    datee: "",
    info: "none",
    rows: [],
  };

  roles = `${window.localStorage.roles}`;

  componentDidMount() {
    // roles
    console.log("role", this.roles);
    // load some data
    this.load_dropdown();
  }

  load_dropdown = () => {
    //
    fetch("/api/init/dropdown", {
      credentials: "same-origin",
      method: "GET",
      mode: "cors",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
      },
    })
      .then((response) => {
        if (response.status !== 200) {
          if (response.status === 401) {
            window.location.replace("/login");
          }
          throw new Error("Access denied");
        }
        return response.json();
      })
      .then((json) => {
        this.setState({ labels: json.labels });
      })
      .catch((error) => console.log(error));
  };

  onChange = (e, data) => {
    this.setState({ cli: data.value, entr: data.value, tcr: data.value });
    this.setState({ codes: data.value });
  };

  onChange_ = (e, data) => {
    console.log("e/data", data.value);
    this.setState({ cli: data.value, entr: data.value, tcr: data.value });
    this.setState({ codes: data.value });
  };

  openfct = () => {
    this.setState({ open: !this.state.open });
    this.setState({ date: [] });
  };

  fermer = () => {
    this.setState({ ouvre: !this.state.ouvre });
  };

  show_network_chaine = (value, filter, nodeid, range) => {
    const width = window.screen.width;
    const height = window.screen.height;

    fetch("/network/preprocessing/node/graph", {
      credentials: "same-origin",
      method: "POST",
      mode: "cors",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
      },
      body: JSON.stringify({
        codes: value,
      }),
    })
      .then((response) => {
        if (response.status !== 200) {
          if (response.status === 401) {
            window.location.replace("/login");
          }
          throw new Error("Access denied");
        }
        return response.json();
      })
      .then((json) => {
        console.log("you be you", json);
        // let grph=cloneDeep(this.state.grph)
        const grph = {
          nodes: json.data[0].data.nodes,
          edges: json.data[0].data.edges,
        };
        // grph['nodes']=[json.data[0].data.nodes]
        // grph['edges']=[json.data[0].data.edges]
        this.setState({ nodes: json.data[0].data.nodes });
        this.setState({ edges: json.data[0].data.edges });
        this.setState({ grph: grph });
        this.setState({ operation_rows: json.data[0].data.rows});
        this.setState({ operation_columns: json.data[0].data.columns});
        this.setState({ loader: "none" });
        this.setState({ text: json.data[0].data.text });
        this.setState({ montants: json.data[0].data.montant });
        this.setState({ solde: json.data[0].data.solde });
        this.setState({ label: json.data[0].data.label });
        this.setState({ info: "flex" });
        this.setState({ cardShow: "hidden" });
        this.setState({ btnShow: "" });
        this.setState({ rows: json.data[0].data.rows });
      })
      .catch((error) => {
        console.log(error);
        this.setState({ loader: "none" });
      });
  };

  handleChanges = (e, data) => {
    this.setState({ group: data.checked });
    let verif = this.state.group;
    console.log(verif);
  };

  handlechange = (e, data) => {
    let chc = this.state.check;
    console.log(chc);
    chc[data.value] = !chc[data.value];
    this.setState({ check: chc });
    var filter = [];
    for (var i in chc) {
      if (chc[i] == true) {
        filter.push(i);
      }
    }
    this.setState({ loader: "block", graphkey: uuidv4, filter: filter });
    this.show_network_chaine(
      this.state.codes,
      filter,
      this.state.nodeid,
      this.state.range,
      this.state.date
    );
  };

  PickeronChange1 = (event) => {
    var date1 = event.target.value;
    console.log("date1", date1);
    this.setState({ date1: date1 });
  };

  PickeronChange2 = (event) => {
    var date2 = event.target.value;
    console.log("date2", date2);
    this.setState({ date2: date2 });
    var date = [];
    date.push(this.state.date1);
    date.push(date2);
    console.log("date", date);
    this.setState({ date: date });
    this.get_transacts(this.state.edge, date);
  };

  SensonChange = (e, data) => {
    this.setState({ sens: data.value });
  };

  LevelonChange = (e, data) => {
    this.setState({ level: data.value });
  };

  ChoiceonChange = (e, data) => {
    this.setState({ choice: data.value });
  };

  handleRangechange = (value) => {
    this.setState({ range: value });
  };

  handleRunClick = () => {
    let grph = cloneDeep(this.state.grph);
    grph["nodes"] = [];
    grph["edges"] = [];
    this.setState({ grph: grph, nodeid: "" });
    this.setState({ loader: "block" });
    console.log("date avant envoie", this.state.date);
    // this.handleClick();
    this.show_network_chaine(this.state.codes);
  };

  selectNode = (event) => {
    console.log("selectNode");
    var { nodes, edges } = event;
  };

  selectEdge = (event) => {
    console.log("selectedge");
    var { nodes, edges } = event;
    console.log("selectedge", edges[0].split("_"));
    // load transacts for edge
    this.get_transacts(edges[0]);
    // show modal
    this.setState({
      edge: edges[0],
      montant: this.state.montants[edges[0]],
      open: true,
      sourc: edges[0].split("_")[0],
      targ: edges[0].split("_")[1],
    });
  };

  get_transacts = (val, date = []) => {
    //
    console.log("val", val);
    this.setState({ loader: "block" });
    if(val){
      this.setState({ loader: "none" });
    }
    //
    // fetch("/api/get/transaction", {
    //   credentials: "same-origin",
    //   method: "POST",
    //   mode: "cors",
    //   headers: {
    //     "Content-Type": "application/json",
    //     "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
    //     //Authorization: `Bearer ${window.localStorage.refreshToken}`
    //   },
    //   body: JSON.stringify({
    //     edge_id: val,
    //     date: date,
    //   }),
    // })
    //   .then((response) => {
    //     if (response.status !== 200) {
    //       if (response.status === 401) {
    //         window.location.replace("/login");
    //       }
    //       throw new Error("Access denied");
    //     }
    //     return response.json();
    //   })
    //   .then((json) => {
    //     console.log("json", json);
    //     // stop loading
    //     this.setState({ loader: "none" });
    //     //
    //     this.setState({
    //       operation_rows: json.rows,
    //       operation_columns: json.columns,
    //     });
    //   })
    //   .catch((error) => {
    //     // stop loading
    //     this.setState({ loader: "none" });
    //     console.log(error);
    //   });
  };

  deselectNode = (event) => {
    console.log("deselectNode");
    var { nodes, edges } = event;
    let chc = this.state.check;
    var filter = [];
    for (var i in chc) {
      if (chc[i] == true) {
        filter.push(i);
      }
    }
  };

  hoverNode = (event) => {
    console.log("hover node", event["node"]);
  };

  handleClick = () => {
    console.log("btnShow", this.state.btnShow);
    if (this.state.btnShow === "") {
      this.setState({ btnShow: "hidden" });
      this.setState({ cardShow: "" });
    } else if (this.state.btnShow === "hidden") {
      this.setState({ btnShow: "" });
      this.setState({ cardShow: "hidden" });
    }
  };

  clearOption = () => {
    this.setState({ selection: undefined });
    this.setState({ info: "none" });
    this.setState({ solde: "" });
    this.setState({ group: { 1: false } });
    this.setState({ entr: "" });
    this.setState({ labels: "" });
  };

  exportFile = () => {
    // upload file method
    /* convert state to workbook */
    const ws1 = XLSX.utils.json_to_sheet(this.state.rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws1, "Liste");
    /* generate XLSX file and send to client */
    XLSX.writeFile(wb, "Liste" + "_" + getCurrentDate() + ".xlsx");
  };

  render() {
    var options = {
      nodes: {
        scaling: {
          min: 10,
          max: 30,
        },
        font: {
          size: 10,
          face: "Tahoma",
        },
      },
      physics: {
        forceAtlas2Based: {
          gravitationalConstant: -80,
          centralGravity: 0.005,
          springLength: 50,
          springConstant: 0.15,
        },
        maxVelocity: 146,
        solver: "forceAtlas2Based",
        timestep: 0.35,
        stabilization: { iterations: 300 },
      },
      interaction: { hover: true },
      edges: {
        width: 1,
        font: { size: 10 },
        smooth: {
          type: "continuous",
        },
      },
      height: "820px",
      width: "150%"
    };

    const events = {
      selectNode: this.selectNode,
      deselectNode: this.deselectNode,
      hoverNode: this.hoverNode,
      selectEdge: this.selectEdge,
    };

    const in_out = [
      {
        key: "opt_in",
        text: "credit",
        value: "in",
      },
      {
        key: "opt_out",
        text: "debit",
        value: "out",
      },
    ];

    const level = [
      {
        key: "level_1",
        text: "Niveau 1",
        value: "level_1",
      },
      {
        key: "level_2",
        text: "Niveau 2",
        value: "level_2",
      },
      {
        key: "level_3",
        text: "Niveau 3",
        value: "level_3",
      },
      {
        key: "level_4",
        text: "Niveau 4",
        value: "level_4",
      },
    ];

    const choice = [
      {
        key: "filtre_1",
        text: "Poids de la transaction",
        value: "filtre_1",
      },
      {
        key: "filtre_2",
        text: "Les Top valeur",
        value: "filtre_2",
      },
    ];

    return (
      <>
        <div className="row" style={{ display: this.state.info }}>
          {/* <div className='col-md-12'> */}
          <div className="col-md-4">
            <h5 className="mb-0">{"Num RTC -" + this.state.entr}</h5>
          </div>
          <div className="col-md-4">
            <button
              type="button"
              className="btn btn-primary pos_btn_exp"
              onClick={this.exportFile}
            >
              Exporter Données
            </button>
          </div>
          <div className="col-md-4">
            <h5 className="mb-0">
              {this.state.dates + " - " + this.state.datee}
            </h5>
          </div>
          {/* </div> */}
        </div>
        <div className="row">
          <div className="col-md-9">
            <Loader
              style={{ display: this.state.loader, zIndex: 9999999 }}
              active
              inline="centered"
              size="massive"
            />
            {this.state.nodes.length > 0 && (
              <>
                <Graph
                  key={this.state.graphkey}
                  graph={this.state.grph}
                  options={options}
                  events={events}
                  // getNetwork={network => {
                  //     console.log('network_key',network.body.data.nodes)
                  // }}
                />
              </>
            )}
            <div
              className="float-start"
              style={{
                display: this.state.info,
                textAlign: "left",
                position:"initial",
                marginBottom: "-40%"
              }}
            >
            <tr><td>
                  <figure>
                    <img src={bleu} className="legende" />
                    <figcaption>Entreprise séléctionnée</figcaption>
                  </figure>
                </td>   <td>
                  <figure>
                    <img src={vert} className="legende" />
                    <figcaption>Clients Sains</figcaption>
                  </figure>
                </td></tr>
            <tr>    <td>
                  <figure>
                    <img src={jaune} className="legende" />
                    <figcaption>Clients en S2</figcaption>
                  </figure>
                </td>
                <td>
                  <figure>
                    <img src={rouge} className="legende" />
                    <figcaption>Clients en S3</figcaption>
                  </figure>
                </td></tr>
            <tr></tr>
                
             
            
              
          
            </div>
          </div>
          <div className="col-md-3" style={{ float: "right" }}>
            <div className="fixed-plugin">
              <a
                className="fixed-plugin-button text-dark position-fixed px-3 py-2"
                style={{ visibility: this.state.btnShow }}
                onClick={this.handleClick}
              >
                <i className="material-icons py-2">menu</i>
              </a>
              <div
                className="card shadow-lg"
                style={{ visibility: this.state.cardShow }}
              >
                <div className="card-header pb-0 pt-3">
                  <div className="float-start">
                    <h5 className="mb-0">Parametrage Recherche</h5>
                    <p>Choisissez parmis les options.</p>
                  </div>
                  <div className="float-end">
                    <button
                      className="btn btn-link text-dark p-0 fixed-plugin-close-button"
                      onClick={this.handleClick}
                    >
                      <i className="material-icons">clear</i>
                    </button>
                  </div>
                </div>
                {/* <hr className="horizontal dark my-1" /> */}
                <div className="card-body pt-sm-3 pt-0">
                  <div className="row">
                    {/* <div className="col-md-12"> */}
                    <Accordion>
                      <AccordionItem
                        style={{
                          display:
                            this.roles === "admin" || this.roles === "cft"
                              ? ""
                              : "none",
                        }}
                      >
                        <AccordionItemHeading>
                          <AccordionItemButton>Particulier</AccordionItemButton>
                        </AccordionItemHeading>
                        <AccordionItemPanel>
                          <Input
                            key="search_by_cli"
                            placeholder="Code Client"
                            value={this.state.cli}
                            onChange={this.onChange_}
                          />
                          {this.state.solde != "" && (
                            <Label
                              color="teal"
                              size="large"
                              style={{
                                marginTop: "10px",
                                marginBottom: "10px",
                              }}
                            >
                              {"Solde: " + this.state.solde + " XOF"}
                            </Label>
                          )}
                        </AccordionItemPanel>
                      </AccordionItem>
                      <AccordionItem>
                        <AccordionItemHeading>
                          <AccordionItemButton>Entreprise</AccordionItemButton>
                        </AccordionItemHeading>
                        <AccordionItemPanel>
                          <div className="row">
                            <Input
                              key="network_chaine"
                              placeholder="Code Client Entreprise"
                              value={this.state.entr}
                              onChange={this.onChange}
                            />
                            {this.state.solde != "" && (
                              <Label
                                color="teal"
                                size="large"
                                style={{
                                  marginTop: "10px",
                                  marginBottom: "10px",
                                }}
                              >
                                {"Solde: " + this.state.solde + " XOF"}
                              </Label>
                            )}
                          </div>
                        </AccordionItemPanel>
                      </AccordionItem>
                    </Accordion>
                    {/* </div> */}
                  </div>
                  <br />
                  <div className="row">
                    {/* <Popup
                                            trigger={ */}
                    <Checkbox
                      key="chaine_check_green"
                      label="Clients en S1"
                      value="1"
                      onChange={this.handlechange}
                      checked={this.state.check["1"]}
                    />
                    {/* }
                                            content='Clients SGCI en S1'
                                            inverted
                                            style={{'backgroundColor':'green'}}
                                        /> */}

                    {/* <Popup
                                            trigger={ */}
                    <Checkbox
                      key="chaine_check_orange"
                      label="Clients en S2"
                      value="2"
                      onChange={this.handlechange}
                      checked={this.state.check["2"]}
                    />
                    {/* }
                                            content='Clients SGCI en S2'
                                            inverted
                                            style={{'backgroundColor':'orange'}}
                                        /> */}

                    {/* <Popup
                                            trigger={ */}
                    <Checkbox
                      key="chaine_check_red_"
                      label="Clients en S3"
                      value="3"
                      onChange={this.handlechange}
                      checked={this.state.check["3"]}
                    />
                    {/* }
                                            content='Clients SGCI en S3'
                                            inverted
                                            style={{'backgroundColor':'red'}}
                                        /> */}

                    {/* <Popup
                                            trigger={ */}
                    <Checkbox
                      key="chaine_check_red"
                      label="Hors SGCI"
                      value="4"
                      onChange={this.handlechange}
                      checked={this.state.check["4"]}
                    />
                    {/* }
                                            content='Opérations impliquant un compte non logé à SGCI'
                                            inverted
                                        /> */}
                  </div>
                  <div className="row">
                    <Dropdown
                      key="in_out"
                      placeholder="Sens du flux"
                      search
                      defaultValue={this.state.sens}
                      selection
                      onChange={this.SensonChange}
                      fluid
                      clearable
                      options={in_out}
                    />

                    <Dropdown
                      key="level"
                      placeholder="Niveau"
                      search
                      defaultValue={this.state.level}
                      selection
                      onChange={this.LevelonChange}
                      fluid
                      clearable
                      options={level}
                    />

                    <Dropdown
                      key="choice"
                      placeholder="Choix du filtre"
                      search
                      defaultValue={this.state.choice}
                      selection
                      onChange={this.ChoiceonChange}
                      fluid
                      options={choice}
                    />
                  </div>
                  <br />
                  <div className="row">
                    <ReactSlider
                      defaultValue={this.state.range}
                      onChange={this.handleRangechange}
                      className="horizontal-slider"
                      thumbClassName="example-thumb"
                      trackClassName="example-track"
                      renderThumb={(props, state) => (
                        <div style={{ backgroundColor: "#333" }} {...props}>
                          {state.valueNow}
                        </div>
                      )}
                    />
                  </div>
                  <br />
                  {/* <div className='row'>
                                        <input type="date" locale="fr-FR" onChange={this.PickeronChange1}/>
                                    </div><br/>
                                    <div className='row'>
                                        <input type="date" locale="fr-FR" onChange={this.PickeronChange2}/>
                                    </div><br/> */}
                  <div className="row">
                    <Button color="green" onClick={this.handleRunClick}>
                      Lancer
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <>
            <Modal open={this.state.open}>
              {
                <Modal.Header>
                  {this.state.label[this.state.sourc]} --{" "}
                  {this.state.label[this.state.targ]} : {this.state.montant} XOF
                </Modal.Header>
              }
              <Modal.Content>
                <div className="row">
                  <div className="col-md-6">
                    <input
                      type="date"
                      locale="fr-FR"
                      onChange={this.PickeronChange1}
                    />
                  </div>
                  <div className="col-md-6">
                    <input
                      type="date"
                      locale="fr-FR"
                      onChange={this.PickeronChange2}
                    />
                  </div>
                </div>
                <br />
                <ReactTable
                  data={this.state.operation_rows}
                  filterable
                  defaultFilterMethod={(filter, row) =>
                    String(row[filter.id]).includes(filter.value)
                  }
                  columns={this.state.operation_columns}
                  defaultPageSize={20}
                  style={{ height: "auto" }}
                  className="-striped -highlight"
                />
              </Modal.Content>
              <Modal.Actions>
                <Button onClick={this.openfct} color="red">
                  Fermer
                </Button>
              </Modal.Actions>
            </Modal>
          </>
        </div>
      </>
    );
  }
}

export default withAuth()(Graph_chaine);
