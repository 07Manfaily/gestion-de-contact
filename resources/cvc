import React, { useState } from "react";
import Graph from "react-graph-vis";
import Dialog from "@mui/material/Dialog";
import DialogTitle from "@mui/material/DialogTitle";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogActions from "@mui/material/DialogActions";
import Button from "@mui/material/Button";

function GraphVis() {
  const [openDialog, setOpenDialog] = useState(false);
  const [dialogContent, setDialogContent] = useState("");

  // Votre JSON data
  const json_data = [
    {
      "CLI_S": 500066619,
      "CLI_Emet": 500477095.0,
      "MontantXOF": 1020000.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 500314452.0,
      "MontantXOF": 2500000.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 500282943.0,
      "MontantXOF": 20000000.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 500048670.0,
      "MontantXOF": 1364500.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 500066619.0,
      "MontantXOF": 100.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 711111110.0,
      "MontantXOF": 2814600.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 111305861.0,
      "MontantXOF": 698700.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 111310187.0,
      "MontantXOF": 300000.0
  },
  {
      "CLI_S": 500066619,
      "CLI_Emet": 116330625.0,
      "MontantXOF": 200000.0
  }
  ];

  // Générez les nodes et edges à partir des données JSON
  const nodes = json_data.map(item => ({
    id: item.CLI_Emet,
    label: item.CLI_Emet.toString(),
    value: item.MontantXOF,
    emet: true,
    title: `MontantXOF: ${item.MontantXOF}`,
  }));

  const edges = json_data.map(item => ({ from: item.CLI_S, to: item.CLI_Emet, value: item.MontantXOF }));

  const graph = {
    nodes,
    edges
  };

  const options = {
    nodes: {
      shape: "dot",
      scaling: {
        customScalingFunction: function (min, max, total, value) {
          return value / total;
        },
        min: 5,
        max: 150,
      },
      font: {
        size: 14,
      },
      borderWidth: 7,
      color: {
        border: "yellow",
        background: 'grey',
      },
    },
    edges: {
      arrows: {
        to: {
          enabled: true,
          scaleFactor: 1,
          type: "arrow",
          color: "green",
        },
        from: {
          scaleFactor: 1,
          type: "arrow",
          color: "red",
        },
      },
      shadow: false,
    },
    interaction: {
      hover: true,
    },
    physics: {
      stabilization: {
        enabled: true,
        iterations: 1000,
        fit: true,
      },
    },
    configure: {
      enabled: false,
    },
    height: "800px",
    width: "1200px",
  };

  const handleNodeClick = (event) => {
    const { nodes } = event;
    console.log(nodes[0], "blabla")
    if (nodes.length > 0) {
      const clickedNodeId = nodes[0];
      const clickedNode = nodes.find(node => node.id === clickedNodeId);
      if (clickedNode) {
        setDialogContent(`Contenu du nœud ${clickedNode.id}: ${clickedNode.title}`);
        setOpenDialog(true);
      }
    }
  };

 
  
  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const events = {
    click: handleNodeClick,
  };

  return (
    <div>
      <Graph graph={graph} options={options} events={events} />

      <Dialog open={openDialog} onClose={handleCloseDialog}>
        <DialogTitle>Popup de Nœud</DialogTitle>
        <DialogContent>
          <DialogContentText>{dialogContent}</DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Fermer</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}

export default GraphVis;
