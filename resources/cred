import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import {
  Grid,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  Paper,
  TableBody,
  Button,
  CircularProgress,
  TextField,
} from "@material-ui/core";
import Modal from "@material-ui/core/Modal";
import Backdrop from "@material-ui/core/Backdrop";
import Fade from "@material-ui/core/Fade";
import AddBoxIcon from "@material-ui/icons/AddBox";
import DeleteIcon from "@material-ui/icons/Delete";
import EditIcon from "@material-ui/icons/Edit";
import { Alert, AlertTitle } from "@mui/lab";
import Widget from "../../components/Widget/Widget";
import numStr from "../../components/utils/convert";

const BeforeDescriptif = ({ props }) => {
  const useStyles = makeStyles((theme) => ({
    modal: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    paper: {
      backgroundColor: theme.palette.background.paper,
      border: "1px solid #4caf50",
      boxShadow: theme.shadows[5],
      padding: theme.spacing(2, 4, 3),
    },
    root: {
      '& > *': {
        margin: theme.spacing(1),
        width: '25ch',
      },
    },
  }));

  const classes = useStyles();

  const [open, setOpen] = useState(false);
  const [editRow, setEditRow] = useState(null);
  const [data, setData] = useState(props.before);

  const handleModalOpen = () => {
    setEditRow(null);
    setOpen(true);
  };

  const updateRow = (row) => {
    setEditRow(row);
    setOpen(true);
  };

  const deleteRow = (row) => {
    const newData = data.filter((line) => line !== row);
    setData(newData);
    setOpen(false);
  };

  const handleModalClose = () => {
    setOpen(false);
    setEditRow(null);
  };

  const handleFormSubmit = (values) => {
    const parsedValues = {
      title: values['Nature de ligne'],
      account_number: values['Numero compte'],
      autorisation_amount: parseFloat(values['Autorisation']) || 0,
      outstanding_amount: parseFloat(values['En cours']) || 0,
      devise: values['Devise'],
      maturity_date: values['Délais de maturité'],
    };

    if (editRow) {
      const newData = data.map((line) =>
        line === editRow ? { ...line, ...parsedValues } : line
      );
      setData(newData);
    } else {
      setData([...data, parsedValues]);
    }
    handleModalClose();
  };

  return (
    <Grid container item xs={12} rowSpacing={2} spacing={2}>
      <Grid container spacing={4}>
        <Grid item xs={12} md={12}>
          <Widget
            title="Autorisations avant demande"
            upperTitle
            className={classes.card}
            bodyClass={classes.fullHeightBody}
          >
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} aria-label="caption table">
                <caption>
                  <Button
                    onClick={handleModalOpen}
                    variant="contained"
                    style={{
                      color: "white",
                      backgroundColor: "#ff5722",
                    }}
                  >
                    <AddBoxIcon style={{ color: "white" }} /> Ajouter une ligne
                  </Button>
                </caption>
                <TableHead>
                  <TableRow>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Nature ligne</b>
                    </TableCell>
                    {/* ... (other table headers) ... */}
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Action</b>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {props.load ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <CircularProgress thickness={2} size={80} />
                      </TableCell>
                    </TableRow>
                  ) : data !== undefined ? (
                    data.map((avant) => (
                      <TableRow key={avant.id}>
                        {/* ... (other table cells) ... */}
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          <Button onClick={() => deleteRow(avant)}>
                            <DeleteIcon style={{ color: "red" }} />
                          </Button>
                          <Button onClick={() => updateRow(avant)}>
                            <EditIcon style={{ color: "green" }} />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Alert severity="error">
                          <AlertTitle>Error</AlertTitle>
                          <strong> Sorry!! Aucune information liée au client</strong>
                        </Alert>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            <Modal
              aria-labelledby="transition-modal-title"
              aria-describedby="transition-modal-description"
              className={classes.modal}
              open={open}
              onClose={handleModalClose}
              closeAfterTransition
              BackdropComponent={Backdrop}
              BackdropProps={{
                timeout: 500,
              }}
            >
              <Fade in={open}>
                <div className={classes.paper}>
                  <h2>{editRow ? "Modification de la ligne " + "" + editRow.title : "Ajouter une nouvelle ligne"}</h2>
                  <form
                    className={classes.root}
                    onSubmit={(e) => {
                      e.preventDefault();
                      const formData = new FormData(e.target);
                      const val = {};
                      formData.forEach((value, key) => {
                        val[key] = value;
                      });
                      handleFormSubmit(val);
                    }}
                  >
                    <TextField
                      name="Nature de ligne"
                      id="outlined-basic"
                      label="Nature de ligne"
                      defaultValue={editRow ? editRow.title : ""}
                      variant="outlined"
                    />
                    {/* ... (other TextFields) ... */}
                    <Button style={{ background: "#33691e", color: "white" }} type="submit" variant="contained">
                      {editRow ? "Modifier" : "Ajouter"}
                    </Button>
                  </form>
                </div>
              </Fade>
            </Modal>
          </Widget>
        </Grid>
      </Grid>
    </Grid>
  );
};

export default BeforeDescriptif;




import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import Slider from "@material-ui/core/Slider";
import Typography from "@material-ui/core/Typography";

const useStyles = makeStyles({
  root: {
    width: 300,
  },
  nonOk: {
    color: "red", // Set color for "NON OK"
  },
  enCours: {
    color: "green", // Set color for "En cours"
  },
  neutre: {
    color: "gray", // Set color for "Neutre"
  },
});

const marks = [
  { value: 0, label: "NON OK" },
  { value: 50, label: "En cours" },
  { value: 100, label: "Neutre" },
];

const CustomSlider = () => {
  const classes = useStyles();
  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <div className={classes.root}>
      <Typography gutterBottom>Slider with Three Values</Typography>
      <Slider
        value={value}
        onChange={handleChange}
        valueLabelDisplay="auto"
        step={null}
        marks={marks}
        min={0}
        max={100}
        classes={{
          markLabel: classes.enCours, // Set color for "En cours" label
          markLabelActive: classes.nonOk, // Set color for "NON OK" label when active
        }}
        valueLabelDisplay="on"
        valueLabelFormat={(value) => {
          switch (value) {
            case 0:
              return <span className={classes.nonOk}>NON OK</span>;
            case 50:
              return <span className={classes.enCours}>En cours</span>;
            case 100:
              return <span className={classes.neutre}>Neutre</span>;
            default:
              return value;
          }
        }}
      />
    </div>
  );
};

export default CustomSlider;
