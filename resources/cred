



function ControlEligibilite({ props }) {
    const classes = useStyles();

    return (
      <Grid item xs={12} md={12}>
        <Widget
          title="	CONTROLES D’ELIGIBILITE A LA REVUE SIMPLIFIEE"
          upperTitle
          className={classes.card}
          bodyClass={classes.fullHeightBody}
        >
          <WidgetAccordion
            title={"KYC valide et fiche de contrôle conformité dûment remplie"}
            description1={"Vérifier la date de validité du KYC du client"}
            description2={
              "Identifier le niveau de risque à partir de la classification FCCR"
            }
            valueRadio={
              props.controlEligibilte.kyc_validity
                ? props.controlEligibilte.kyc_validity.condition
                : ""
            }
            val={props.controlEligibilte.kyc_validity.condition}
          />
          <WidgetAccordion
            title={"PCRU local"}
            description1={
              "Verification du PCRU local  (Le PCRU local est un garant, il suit la procédure d'octroi de prêt)"
            }
            valueRadio={
              props.controlEligibilte.local_pcru
                ? props.controlEligibilte.local_pcru.condition
                : ""
            }
            val={props.controlEligibilte.local_pcru.condition}
          />

          <WidgetAccordion
            title={"   Contrepartie en S1"}
            description1={
              "Verification de la contrepatie en S1 (la Contrepartie en S1 correspond à l'entreprise qui sollicite le prêt)"
            }
            valueRadio={
              props.controlEligibilte.financial_compensation_S1
                ? props.controlEligibilte.financial_compensation_S1.condition
                : ""
            }
            val={props.controlEligibilte.financial_compensation_S1.condition}
          />

          <WidgetAccordion
            title={"Dans la LAD du CRO local"}
            description1={"Accord du (CRO) Directeur Des risques du crédit"}
          />
          <WidgetAccordion
            title={"La précédente revue était une revue complète"}
            description1={
              "Verifier si le précédent dossier a suivi le processus de revue normal"
            }
          />
          <WidgetAccordion
            title={
              "A la précédente revue, absence de demande expresse par RISQ de faire une nouvelle revue complète"
            }
            description1={"Un dossier qui a suivi le circuit normal"}
          />

          <WidgetAccordion
            title={"Nature d'activité de la contrepartie inchangée"}
            description1={
              "Verifier si notre client n'a pas changé d'activité d'une année à l'autre"
            }
          />
          <WidgetAccordion
            title={"Evolution du CA sur 1 an comprise entre -10% et +20% "}
            description1={
              "Rejeter le renouvellement d'un client ayant une évolution brusque de son CA d'une année à l'autre"
            }
          />
          <WidgetAccordion
            title={
              "   Pas d'évolution législative majeure sur le secteur d'activité"
            }
            description1={
              "Verifier si notre client n'est pas impacté par des lois en vigueur ou des sanctions "
            }
          />
          <WidgetAccordion
            title={
              "Aucun changement d'actionnariat engendrant une modification du contrôle de l'entreprise"
            }
            description1={
              "Verifier l'entré ou la sortie d'un actionnaire(L'entrée ou la sortie d'un actionnaire peut avoir un impact sur le renouvellement)"
            }
          />
          <WidgetAccordion
            title={
              "Absence d'évènement significatif défavorable depuis la dernière revue"
            }
            description1={
              "Verifier s'il y as des facteurs endogènes ou exogène pouvant impactés sur l'activité de notre client"
            }
          />
          <WidgetAccordion
            title={
              "EF définitifs déposés à l’administration fiscale avec cachet d’un cabinet d’audit et/ou visa CAC lorsque ces éléments ont été produits lors du précédent dossier"
            }
            description1={
              "Verifier si les chiffres sont certifiés ou pas par le rapport CAC( c'est-à-dire validé par le commissaire au compte)"
            }
          />

          <WidgetAccordion
            title={"FP > à 50% du capital social"}
            description1={"Fond Propre"}
          />
          <WidgetAccordion title={"EBITDA > 0"} />
          <WidgetAccordion title={" Si RN négatif, RN N-1 >0"} />

          <WidgetAccordion
            title={
              "Ratio Dette Financière brute / EBITDA post transaction (définition BCE) < 4"
            }
          />
          <WidgetAccordion
            title={
              "Pas de bris de covenants financiers depuis la mise en place des lignes (focus sur les covenants financiers)"
            }
          />
          <WidgetAccordion
            title={
              "Prise effective de toutes les garanties sollicitées lors du dernier octroi"
            }
          />

          <WidgetAccordion
            title={
              "Saisie des autorisations dans le Core Banking System (ce qui suppose un respect des autres conditions d'octroi)"
            }
            description1={
              "Verifier si les précédentes lignes ont été magnétisées dans le CBS"
            }
          />
          <WidgetAccordion
            title={
              "Flux Moyens Mensuelles sur 12 mois glissants > à l'autorisation de découvert (s'il y en a une)"
            }
            description1={
              "Vérifier la moyenne des flux confiés par le client sur les 12 derniers mois est en corrélation avec le découvert accordé (s'il y en a)"
            }
          />
          <WidgetAccordion
            title={
              "Absence de dépassement d'autorisation et/ou d'impayé en cours"
            }
            description1={
              "Vérifier si le client n'est pas en irrégularité dans nos livres"
            }
          />
          <WidgetAccordion
            title={
              "Typologie de lignes inchangée sinon ajout de lignes mieux sécurisées"
            }
            description1={
              "Pas de modification de lignes sollicitées ou modification sollicitée en phase avec le fichier des annexes"
            }
          />
          <WidgetAccordion
            title={
              "Renouvellement des lignes à l'identique, voire augmentation dans la limite de l'évolution du CA"
            }
          />
          <WidgetAccordion
            title={
              "Absence de demande de mise en place de CMT (hors enveloppe MT/CB)"
            }
            description1={
              "La présente demande de renouvellement ne doit pas contenir une demande de crédit d'investissement sauf s'il s'agit d'une enveloppe "
            }
          />
          <WidgetAccordion
            title={
              "Dernier MT significatif mis en place (hors enveloppe), en amortissement depuis plus de 12 mois"
            }
            description1={
              "Verifier le dernier CMT mis en place depuis plus de 12 mois"
            }
          />
        </Widget>
      </Grid>
    );
  }

import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import useStyles from "./styles";
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,FormControlLabel,RadioGroup,Radio,FormControl
} from "@material-ui/core";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import clsx from "clsx";
import CommentIcon from "@material-ui/icons/Comment";
import SpeakerNotesOffIcon from "@material-ui/icons/SpeakerNotesOff";
import { TextareaAutosize } from "@mui/base/TextareaAutosize";
import Invalid from "../../images/inval.jpg"
import { Divider } from '@material-ui/core';

export default function WidgetAccordion({
  title,
  description1,
  description2,
  valueRadio,
  val
}) {
  const classes = useStyles();
  const [MyComment, setMyComment] = useState("");
  // const [radio, setRadio] = useState("");
  // const [radio1, setRadio1] = useState("");
  // const [radio2, setRadio2] = useState("");
  // const [radio3, setRadio3] = useState("");
  // const [radio4, setRadio4] = useState("");
  // const [radio5, setRadio5] = useState("");
  // const [radio6, setRadio6] = useState("");
  // const [radio7, setRadio7] = useState("");
  // const [radio8, setRadio8] = useState("");
  // const [radio9, setRadio9] = useState("");
  return (
    <Accordion defaultExpanded>
      <AccordionSummary
        expandIcon={<ExpandMoreIcon />}
        aria-controls="panel1c-content"
        id="panel1c-header"
      >
        <div style={{width:500}} className={classes.column}>
          <Typography className={classes.heading}>
            <b style={{ color: "blue" }}>{title}</b>
          </Typography>
          {MyComment.length > 0 ? (
            <Typography className={classes.heading}>
              <b style={{ color: "green" }}>
                <CommentIcon />
              </b>
            </Typography>
          ) : (
            <Typography className={classes.heading}>
              <b style={{ color: "red" }}>
                <SpeakerNotesOffIcon />
              </b>
            </Typography>
          )}
        </div>
      </AccordionSummary>
      <AccordionDetails className={classes.details}>
        <div style={{width:500}} className={classes.column}>
          {!description1 && !description2 ? (
            <p></p>
          ) : (
            <h3>
              <b>Descriptif</b>
            </h3>
          )}
          <ul>
            {!description1 ? (
              <p></p>
            ) : (
              <li>
                <i>
                  <b>{description1}</b>{" "}
                </i>
              </li>
            )}

            {!description2 ? (
              <p></p>
            ) : (
              <li>
                <i>
                  <b>{description2}</b>{" "}
                </i>
              </li>
            )}
          </ul>
        </div>
        <Divider variant="inset" style={{marginRight:"20px"}} orientation="vertical" flexItem />
        <div style={{width:500}} className={clsx(classes.column, classes.helper)}>
          <Typography variant="caption">
            <form action="">
              {" "}
              <TextareaAutosize
                name="comment"
                value={MyComment}
                onChange={(e) => setMyComment(e.target.value)}
                style={{
                  width: "97%",
                  height: "80px",
                  lineHeight: "1.2",
                  padding: "8px 12px",
                  borderRadius: "8px",
                  margin: "8px",
                }}
                aria-label="empty textarea"
                placeholder="Commentaire"
              />
            </form>
          </Typography>
        </div>
        <Divider variant="inset"style={{marginLeft:"22px"}} orientation="vertical" flexItem/>
        
        <div style={{width:500}} className={clsx(classes.column, classes.helper)}>

  <div style={{marginLeft:"22px"}}>      <FormControl>
      <RadioGroup
        row
        aria-labelledby="demo-row-radio-buttons-group-label"
        name="row-radio-buttons-group"
      >
        {valueRadio ?
        <>
          <FormControlLabel     control={ <Radio  style={{ color: "red" }} />} label="Non Ok" />
          <FormControlLabel    control={<Radio   style={{ color: "gray" }} />} label="Neutre" />
          <FormControlLabel    control={<Radio checked="true"  style={{ color: "green" }} />} label="Ok" />
          </>: valueRadio === null ? <>
          <FormControlLabel    control={ <Radio  style={{ color: "red" }} />} label="Non Ok" />
          <FormControlLabel    control={<Radio checked="true"  style={{ color: "gray" }} />} label="Neutre" />
          <FormControlLabel    control={<Radio   style={{ color: "green" }} />} label="Ok" />
          </> : <>
          <FormControlLabel    control={ <Radio   style={{ color: "red" }} />} label="Non Ok" />
          <FormControlLabel    control={<Radio  style={{ color: "gray" }} />} label="Neutre" />
          <FormControlLabel  control={<Radio    style={{ color: "green" }} />} label="Ok" />
          {/* value={radio8}  onChange={(e) => setRadio8(e.target.value)}  */}
          </>
        }
      </RadioGroup>
    </FormControl></div>
{val === false ?  

<img src={Invalid} style={{width:"40%", height:"50px"}} /> :"" }
        {/* <Slider
         value={value}
       onChange={handleChangeSlide}
       valueLabelDisplay="auto"
       step={null}
         marks={marks}
         min={0}
       max={100}
         classes={{
           markLabel: classes.Ok, // Set color for "En cours" label
           markLabelActive: classes.nonOk, // Set color for "NON OK" label when active
         }}
        valueLabelDisplay="on"
        valueLabelFormat={(value) => {
          switch (value) {
            case 0:
              return <span className={classes.nonOk}>NON OK</span>;
            case 50:
              return <span className={classes.Ok}>Ok</span>;
            case 100:
               return <span className={classes.neutre}>Neutre</span>;
            default:
               return value;
          }
        }}
       /> */}

          
        </div>
      </AccordionDetails>
      {/* <Divider />
          <AccordionActions>
            <FormControl component="fieldset">
              <RadioGroup
                row
                aria-label="position"
                name="position"
                defaultValue="top"
              >
                <FormControlLabel
                  value="OK"
                  control={<Radio style={{ color: "green" }} />}
                  label={<ThumbUpAltTwoToneIcon style={{ color: "green" }} />}
                />
                <FormControlLabel
                  value="KO"
                  control={<Radio style={{ color: "red" }} />}
                  label={<ThumbDownAltTwoToneIcon style={{ color: "red" }} />}
                />
              </RadioGroup>
            </FormControl>
          </AccordionActions> */}
    </Accordion>
  );
}





import React, { useState } from "react";
import axios from "axios";
import Client from "./clientInfo";
import { Audio } from 'react-loader-spinner';
import {
  Box,
  Grid,
  Button,
  Stepper,
  Typography,
  StepButton,
  Step,
  AccordionDetails,
  Accordion,
  AccordionSummary,
  TableCell,
  TableBody,
  TextField,
  TableContainer,
  Table,
  Paper,
  TableHead,
  TableRow,
} from "@material-ui/core";
import Descriptifs from "./engagement";
import { Alert, AlertTitle } from "@mui/lab";
import BeforeDescriptif from "./beforeDescriptif";
import AfterDescriptif from "./afterDescriptifs";
import ControlEligibilite from "./Control";
import SkipNextIcon from "@material-ui/icons/SkipNext";
import SkipPreviousIcon from "@material-ui/icons/SkipPrevious";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import RotateLeftIcon from "@material-ui/icons/RotateLeft";
import { getCookie } from "../../context/UserContext";
import useStyles from "../dashboard/styles";
import numStr from "../../components/utils/convertFloate";
import Widget from "../../components/Widget/Widget";
import CheckCircleIcon from '@material-ui/icons/CheckCircle';
import { format } from "date-fns";

export default function HorizontalNonLinearStepper() {
  //--State for engagement table--

  //--State for Client--
  const [matricule, setMatricule] = useState("");
  const [clientData, setClientData] = useState({});
  //--State for before autorisation--
  const [before, setBefore] = useState([]);
  //--State for after autorisation--
  const [summary, setSummary] = useState({});
  //--State for Control Eligibilte--
  const [controlEligibilte, setControlEligibilte] = useState({});

  const [loading, setLoading] = useState(false);
  const [load, setLoad] = useState(false);
  const [error, setError] = useState("");
  const [inputValue, setInputValue] = useState(false);

  function getSteps() {
    return [
      "Controle eligibilite",
      "Descriptifs avant la demande",
      "Descriptifs après la demande",
      "Details des nouvelles autorisations",
    ];
  }
  function getStepContent(step) {
    switch (step) {
      case 0:
        return <ControlEligibilite props={clientProps} />;
      case 1:
        return <BeforeDescriptif props={clientProps} />;
      case 2:
        return <AfterDescriptif props={clientProps} />;
      case 3:
        return <Engagement />;
      default:
        return "Unknown step";
    }
  }

 //vue correspondant au tableau d'engagement
 function Engagement () {
    var classes = useStyles();
    const [data, setData] = useState();
    const [value1, setValue1] = useState(null);
    const [value2, setValue2] = useState(null);
    const [value5, setValue5] = useState(null);
    const [value7, setValue7] = useState(null);
    const handleChange1 = (e) => {
      setValue1(parseFloat(e.target.value));
    };

    const handleChange2 = (e) => {
      setValue2(parseFloat(e.target.value));
    };

    const handleChange5 = (e) => {
      setValue5(parseFloat(e.target.value));
    };

    const handleChange7 = (e) => {
      setValue7(parseFloat(e.target.value));
    };
    return (
      <Grid item xs={12} md={12}>
        <Widget
          title="Engagement du client"
          upperTitle
          className={classes.card}
          bodyClass={classes.fullHeightBody}
        >
          <TableContainer component={Paper}>
            <Table sx={{ minWidth: 650 }} aria-label="caption table">
              {/* <caption>
                 <Button
                  style={{
                    color: "white",
                    background: "green",
                    marginTop: "20px",
                  }}
                  variant="contained"
                  onClick={handleSendEngagement}
                  type="primary"
                >
                  VALIDER
                </Button> 
              </caption> */}
              <TableHead>
                <TableRow>
                  <TableCell></TableCell>
                  <TableCell>
                    <b>Autorisations précédentes</b>
                  </TableCell>
                  <TableCell>
                    <b>Total Autorisations Solicités</b>
                  </TableCell>
                  <TableCell>
                    <b>Variation</b>
                  </TableCell>
                  <TableCell>
                    <b>%Variation</b>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <TableCell>
                    <b style={{ color: "#b71c1c" }}>&lt;=1</b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["1"] === null
                        ? "---------"
                        : numStr(summary["1"], " ")}{" "}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <TextField
                      style={{
                        backgroundColor: "#f5f5f5",
                        border: "2",
                        borderColor: "black",
                      }}
                      id="filled-basic"
                      placeholder="........"
                      variant="filled"
                      value={value1}
                      onChange={handleChange1}
                      type="number"
                    />
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["1"] === null
                        ? "---------"
                        : numStr(
                            isNaN(value1 - summary["1"])
                              ? "----------------"
                              : value1 - summary["1"],
                          )}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["1"] === null
                        ? "---------"
                        : isNaN(
                            (
                              ((value1 - summary["1"]) / summary["1"]) *
                              100
                            ).toFixed(2),
                          )
                        ? "-------"
                        : (
                            ((value1 - summary["1"]) / summary["1"]) *
                            100
                          ).toFixed(2)}{" "}
                      %
                    </b>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <b style={{ color: "#b71c1c" }}>&lt;=2</b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {" "}
                      {summary["2"] === null
                        ? "---------"
                        : numStr(summary["2"])}{" "}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <TextField
                      value={value2}
                      onChange={handleChange2}
                      style={{ backgroundColor: "#f5f5f5", border: "2" }}
                      id="filled-basic"
                      placeholder="........"
                      variant="filled"
                      type="number"
                    />
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["2"] === null
                        ? "---------"
                        : numStr(
                            isNaN(value2 - summary["2"])
                              ? "----------------"
                              : value2 - summary["2"],
                          )}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["2"] === null
                        ? "---------"
                        : isNaN(
                            (
                              ((value2 - summary["2"]) / summary["2"]) *
                              100
                            ).toFixed(2),
                          )
                        ? "-------"
                        : (
                            ((value2 - summary["2"]) / summary["2"]) *
                            100
                          ).toFixed(2)}{" "}
                      %
                    </b>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <b style={{ color: "#b71c1c" }}>&lt;=5</b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["5"] === null
                        ? "---------"
                        : numStr(summary["5"])}{" "}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <TextField
                      value={value5}
                      onChange={handleChange5}
                      style={{ backgroundColor: "#f5f5f5", border: "2" }}
                      id="filled-basic"
                      placeholder="........"
                      variant="filled"
                      type="number"
                    />
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["5"] === null
                        ? "---------"
                        : numStr(
                            isNaN(value5 - summary["5"])
                              ? "----------------"
                              : value5 - summary["5"],
                          )}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["5"] === null
                        ? "---------"
                        : isNaN(
                            (
                              ((value5 - summary["5"]) / summary["5"]) *
                              100
                            ).toFixed(2),
                          )
                        ? "-------"
                        : (
                            ((value5 - summary["5"]) / summary["5"]) *
                            100
                          ).toFixed(2)}{" "}
                      %
                    </b>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <b style={{ color: "#b71c1c" }}>&lt;=7</b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["7"] === null
                        ? "---------"
                        : numStr(value7 - summary["7"])}{" "}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <TextField
                      value={value7}
                      onChange={handleChange7}
                      style={{ backgroundColor: "#f5f5f5", border: "2" }}
                      id="filled-basic"
                      placeholder="........"
                      variant="filled"
                      type="number"
                    />
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["7"] === null
                        ? "---------"
                        : numStr(
                            isNaN(value7 - summary["7"])
                              ? "----------------"
                              : value7 - summary["7"],
                          )}
                    </b>
                  </TableCell>
                  <TableCell>
                    {" "}
                    <b style={{ color: "#283593" }}>
                      {summary["7"] === null
                        ? "---------"
                        : isNaN(
                            (
                              ((value7 - summary["7"]) / summary["7"]) *
                              100
                            ).toFixed(2),
                          )
                        ? "-------"
                        : (
                            ((value7 - summary["7"]) / summary["7"]) *
                            100
                          ).toFixed(2)}{" "}
                      %
                    </b>
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Widget>
      </Grid>
    );
  };
  const handleSendEngagement = async () => {
    await axios
      .post(
        "/api/commitment/summary/set",
        {
          number_client: matricule,
          1: value1,
          2: value2,
          3: value5,
          4: value7,
        },
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse: ", response);
      })
      .catch((error) => {
        console.log("Error lors du traitement:", error);
      });
  };
 
  const [activeStep, setActiveStep] = React.useState(0);
  const [completed, setCompleted] = React.useState(new Set());
  const [skipped, setSkipped] = React.useState(new Set());
  const steps = getSteps();

  const totalSteps = () => {
    return steps.length;
  };


  const isStepOptional = (step) => {
    return step === 1;
  };

  const handleSkip = () => {
    if (!isStepOptional(activeStep)) {
      // You probably want to guard against something like this
      // it should never occur unless someone's actively trying to break something.
      throw new Error("You can't skip a step that isn't optional.");
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setSkipped((prevSkipped) => {
      const newSkipped = new Set(prevSkipped.values());
      newSkipped.add(activeStep);
      return newSkipped;
    });
  };

  const skippedSteps = () => {
    return skipped.size;
  };

  const completedSteps = () => {
    return completed.size;
  };

  const allStepsCompleted = () => {
    return completedSteps() === totalSteps() - skippedSteps();
  };

  const isLastStep = () => {
    return activeStep === totalSteps() - 1;
  };

  const handleNext = () => {
    const newActiveStep =
      isLastStep() && !allStepsCompleted()
        ? // It's the last step, but not all steps have been completed
          // find the first step that has been completed
          steps.findIndex((step, i) => !completed.has(i))
        : activeStep + 1;

    setActiveStep(newActiveStep);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleStep = (step) => () => {
    setActiveStep(step);
  };

  const handleComplete = async () => {
    const newCompleted = new Set(completed);
    newCompleted.add(activeStep);
    setCompleted(newCompleted);
    if (completed.size !== totalSteps() - skippedSteps()) {
      handleNext();
    }
    if (activeStep === 3) {
          await handleSendEngagement();
      }
  };







----engagement----
import React, { useState } from "react";
import axios from "axios";
import numStr from "../../components/utils/convertFloate";

import {
  Grid,
  TextField,
  TableContainer,
  Table,
  Paper,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Button,
} from "@material-ui/core";

import useStyles from "../dashboard/styles";

// components
import Widget from "../../components/Widget/Widget";
import { getCookie } from "../../context/UserContext";
import { format } from "date-fns";

// data

const Engagement = ({ props }) => {
  var classes = useStyles();
  const [value1, setValue1] = useState(null);
  const [data, setData] = useState();
  const [value2, setValue2] = useState(null);
  const [value5, setValue5] = useState(null);
  const [value7, setValue7] = useState(null);

  const isValidNumber = (value) => {
    return !isNaN(value) && isFinite(value);
  };

  const formDate = (MyDate) => {
    const date = new Date(MyDate);

    return format(date, "dd/MM/yyyy");
  };

  const handleChange1 = (e) => {
    setValue1(parseFloat(e.target.value));
  };

  const handleChange2 = (e) => {
    setValue2(parseFloat(e.target.value));
  };

  const handleChange5 = (e) => {
    setValue5(parseFloat(e.target.value));
  };

  const handleChange7 = (e) => {
    setValue7(parseFloat(e.target.value));
  };

   const handleSend = async () => {
   setData({matricule:props.matricule, 1:value1, 2:value2, 3:value5, 4:value7});
    const nouvelleDonnée = props.handleSendEngagement(data);
    if (nouvelleDonnée) {
      setData(nouvelleDonnée);
    }
  };

  return (
    <Grid item xs={12} md={12}>
      <Widget
        title="Engagement du client"
        upperTitle
        className={classes.card}
        bodyClass={classes.fullHeightBody}
      >
        <TableContainer component={Paper}>
          <Table sx={{ minWidth: 650 }} aria-label="caption table">
            <caption>
              {/* <Button
                style={{
                  color: "white",
                  background: "green",
                  marginTop: "20px",
                }}
                variant="contained"
                onClick={handleSend}
                type="primary"
              >
                VALIDER
              </Button> */}
            </caption>
            <TableHead>
              <TableRow>
                <TableCell></TableCell>
                <TableCell>
                  <b>Autorisations précédentes</b>
                </TableCell>
                <TableCell>
                  <b>Total Autorisations Solicités</b>
                </TableCell>
                <TableCell>
                  <b>Variation</b>
                </TableCell>
                <TableCell>
                  <b>%Variation</b>
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>
                  <b style={{ color: "#b71c1c" }}>&lt;=1</b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["1"] === null
                      ? "---------"
                      : numStr(props.summary["1"], " ")}{" "}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <TextField
                    style={{
                      backgroundColor: "#f5f5f5",
                      border: "2",
                      borderColor: "black",
                    }}
                    id="filled-basic"
                    placeholder="........"
                    variant="filled"
                    value={value1}
                    onChange={handleChange1}
                    type="number"
                  />
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["1"] === null
                      ? "---------"
                      : numStr(
                          isNaN(value1 - props.summary["1"])
                            ? "----------------"
                            : value1 - props.summary["1"],
                        )}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["1"] === null
                      ? "---------"
                      : isNaN(
                          (
                            ((value1 - props.summary["1"]) /
                              props.summary["1"]) *
                            100
                          ).toFixed(2),
                        )
                      ? "-------"
                      : (
                          ((value1 - props.summary["1"]) / props.summary["1"]) *
                          100
                        ).toFixed(2)}{" "}
                    %
                  </b>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <b style={{ color: "#b71c1c" }}>&lt;=2</b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {" "}
                    {props.summary["2"] === null
                      ? "---------"
                      : numStr(props.summary["2"])}{" "}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <TextField
                    value={value2}
                    onChange={handleChange2}
                    style={{ backgroundColor: "#f5f5f5", border: "2" }}
                    id="filled-basic"
                    placeholder="........"
                    variant="filled"
                    type="number"
                  />
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["2"] === null
                      ? "---------"
                      : numStr(
                          isNaN(value2 - props.summary["2"])
                            ? "----------------"
                            : value2 - props.summary["2"],
                        )}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["2"] === null
                      ? "---------"
                      : isNaN(
                          (
                            ((value2 - props.summary["2"]) /
                              props.summary["2"]) *
                            100
                          ).toFixed(2),
                        )
                      ? "-------"
                      : (
                          ((value2 - props.summary["2"]) / props.summary["2"]) *
                          100
                        ).toFixed(2)}{" "}
                    %
                  </b>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <b style={{ color: "#b71c1c" }}>&lt;=5</b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["5"] === null
                      ? "---------"
                      : numStr(props.summary["5"])}{" "}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <TextField
                    value={value5}
                    onChange={handleChange5}
                    style={{ backgroundColor: "#f5f5f5", border: "2" }}
                    id="filled-basic"
                    placeholder="........"
                    variant="filled"
                    type="number"
                  />
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["5"] === null
                      ? "---------"
                      : numStr(
                          isNaN(value5 - props.summary["5"])
                            ? "----------------"
                            : value5 - props.summary["5"],
                        )}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["5"] === null
                      ? "---------"
                      : isNaN(
                          (
                            ((value5 - props.summary["5"]) /
                              props.summary["5"]) *
                            100
                          ).toFixed(2),
                        )
                      ? "-------"
                      : (
                          ((value5 - props.summary["5"]) / props.summary["5"]) *
                          100
                        ).toFixed(2)}{" "}
                    %
                  </b>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <b style={{ color: "#b71c1c" }}>&lt;=7</b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["7"] === null
                      ? "---------"
                      : numStr(value7 - props.summary["7"])}{" "}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <TextField
                    value={value7}
                    onChange={handleChange7}
                    style={{ backgroundColor: "#f5f5f5", border: "2" }}
                    id="filled-basic"
                    placeholder="........"
                    variant="filled"
                    type="number"
                  />
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["7"] === null
                      ? "---------"
                      : numStr(
                          isNaN(value7 - props.summary["7"])
                            ? "----------------"
                            : value7 - props.summary["7"],
                        )}
                  </b>
                </TableCell>
                <TableCell>
                  {" "}
                  <b style={{ color: "#283593" }}>
                    {props.summary["7"] === null
                      ? "---------"
                      : isNaN(
                          (
                            ((value7 - props.summary["7"]) /
                              props.summary["7"]) *
                            100
                          ).toFixed(2),
                        )
                      ? "-------"
                      : (
                          ((value7 - props.summary["7"]) / props.summary["7"]) *
                          100
                        ).toFixed(2)}{" "}
                    %
                  </b>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Widget>

    </Grid>
  );
};

export default Engagement;



--------stepers----
import React, { useState } from "react";
import axios from "axios";
import Client from "./clientInfo";
import {
  Box,
  Grid,
  Button,
  Stepper,
  Typography,
  StepButton,
  Step,
  AccordionDetails,
  Accordion,
  AccordionSummary,
} from "@material-ui/core";
import Descriptifs from "./engagement";
import { Alert, AlertTitle } from "@mui/lab";
import BeforeDescriptif from "./beforeDescriptif";
import AfterDescriptif from "./afterDescriptifs";
import ControlEligibilite from "./Control";
import SkipNextIcon from "@material-ui/icons/SkipNext";
import SkipPreviousIcon from "@material-ui/icons/SkipPrevious";
import CheckCircleIcon from "@material-ui/icons/CheckCircle";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import RotateLeftIcon from "@material-ui/icons/RotateLeft";
import { getCookie } from "../../context/UserContext";

export default function HorizontalNonLinearStepper() {
  function getSteps() {
    return [
      "Controle eligibilite",
      "Descriptifs avant la demande",
      "Descriptifs après la demande",
      "Details des nouvelles autorisations",
    ];
  }

  function getStepContent(step) {
    switch (step) {
      case 0:
        return <ControlEligibilite props={clientProps} />;
      case 1:
        return <BeforeDescriptif props={clientProps} />;
      case 2:
        return <AfterDescriptif props={clientProps} />;
      case 3:
        return <Descriptifs props={clientProps} />;
      default:
        return "Unknown step";
    }
  }
  const [activeStep, setActiveStep] = React.useState(0);
  const [completed, setCompleted] = React.useState({});
  const steps = getSteps();

  const totalSteps = () => {
    return steps.length;
  };

  const completedSteps = () => {
    return Object.keys(completed).length;
  };

  const isLastStep = () => {
    return activeStep === totalSteps() - 1;
  };

  const allStepsCompleted = () => {
    return completedSteps() === totalSteps();
  };

  const handleNext = () => {
    const newActiveStep =
      isLastStep() && !allStepsCompleted()
        ? steps.findIndex((step, i) => !(i in completed))
        : activeStep + 1;
    setActiveStep(newActiveStep);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleStep = (step) => () => {
    setActiveStep(step);
  };

  const handleComplete = () => {
    const newCompleted = completed;
    newCompleted[activeStep] = true;
    setCompleted(newCompleted);
    handleNext();
  };

  const handleReset = () => {
    setActiveStep(0);
    setCompleted({});
  };

  const [matricule, setMatricule] = useState("");
  const [clientData, setClientData] = useState({});
  const [before, setBefore] = useState([]);
  const [summary, setSummary] = useState({});
  const [controlEligibilte, setControlEligibilte] = useState({});
  const [loading, setLoading] = useState(false);
  const [load, setLoad] = useState(false);
  const [error, setError] = useState("");
  const [inputValue, setInputValue] = useState(false);

  const handleGetClientInfo = async () => {
    if (matricule === "") {
      setInputValue(true);
    } else {
      setInputValue(false);
    }
    setLoading(true);

    await axios
      .post(
        "/api/commitment/client/knowledge",
        { number_client: matricule },
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse de l'api client: ", response);
        const data = response.data.data;
        setClientData((prev) => ({
          ...prev,
          ...data,
        }));
      })
      .catch((error) => {
        console.log("Error lors du traitement:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const handleSummary = async () => {
    setLoading(true);
    await axios
      .post(
        "/api/commitment/summary",
        { number_client: matricule },
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse de summary: ", response);
        const data = response.data.data;
        setSummary((prev) => ({
          ...prev,
          ...data,
        }));
      })
      .catch((error) => {
        console.log("Error lors du traitement:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const handleBeforInside = async () => {
    setLoading(true);
    // const accessToken = localStorage.getItem('accessToken')
    await axios
      .post(
        "/api/commitment/before_insight",
        { number_client: matricule },
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse de l'api before_insight: ", response);
        const data = response.data.data;
        setBefore(data);
        if (response.status === 206) {
          setError("pas de message");
        }
      })
      .catch((error) => {
        console.log("Error lors du traitement de before inside:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };
  const handleControlEligibite = async () => {
    setLoading(true);
    // const accessToken = localStorage.getItem('accessToken')
    await axios
      .post(
        "/api/panel/eligibility",
        { number_client: matricule },
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse de l'api control eligibilité: ", response);
        const data = response.data.data;

        setControlEligibilte((prev) => ({
          ...prev,
          ...data,
        }));
      })
      .catch((error) => {
        console.log("Error lors du traitement de control eligibilité:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const handleSendInside = async (datas) => {
    setLoading(true);
    const newData = datas.filter((row) => row.isModified);
    await axios
      .post("/api/commitment/before_insight/set", newData, {
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
        },
      })
      .then((response) => {
        console.log("reponse de l'api before_insight_set: ", response);
        const data = response;
      })
      .catch((error) => {
        console.log("Error lors du traitement de before inside:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const handleChangeInput = (e) => {
    setMatricule(e.target.value);
  };

  const handleClient = async () => {
    await handleGetClientInfo();
    await handleBeforInside();
    await handleSummary();
    await handleControlEligibite();
  };

  const clientProps = {
    matricule,
    setMatricule,
    clientData,
    summary,
    setSummary,
    error,
    setError,
    inputValue,
    setInputValue,
    setClientData,
    handleSendInside,
    loading,
    setLoading,
    handleGetClientInfo,
    handleBeforInside,
    handleSummary,
    handleControlEligibite,
    controlEligibilte,
    handleChangeInput,
    handleClient,
    load,
    setLoad,
    setBefore,
    before,
  };

  return (
    <Grid className="App">
      <Accordion style={{ backgroundColor: "#006064" }}>
        <AccordionSummary
          expandIcon={<ExpandMoreIcon />}
          aria-controls="panel1a-content"
          id="panel1a-header"
        >
          <Typography style={{ color: "white" }}>
            <b>INFORMATION DU CLIENT</b>
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Client props={clientProps} />
        </AccordionDetails>
      </Accordion>
      <Box sx={{ width: "100%", my: "1rem" }}>
        <Stepper nonLinear activeStep={activeStep}>
          {steps.map((label, index) => (
            <Step key={label}>
              <StepButton
                onClick={handleStep(index)}
                completed={completed[index]}
              >
                {label}
              </StepButton>
            </Step>
          ))}
        </Stepper>
      </Box>
      <div>
        {allStepsCompleted() ? (
          <div>
            <Typography>
              <Alert severity="success">
                <AlertTitle>Felicitation</AlertTitle>
                <strong> Credapp creer avec succès!!!!!</strong>
              </Alert>
            </Typography>
            <Button onClick={handleReset}>
              <RotateLeftIcon />
            </Button>
          </div>
        ) : (
          <div>
            <Typography>{getStepContent(activeStep)}</Typography>

            <Box display="flex" justifyContent="space-between">
              <Button
                style={{ color: "red", marginTop: "20px" }}
                variant="contained"
                disabled={activeStep === 0}
                onClick={handleBack}
                type="primary"
              >
                <SkipPreviousIcon style={{ color: "red" }} />
              </Button>
              <Button
                variant="contained"
                style={{ color: "green", marginTop: "20px" }}
                onClick={handleComplete}
              >
                {completedSteps() === totalSteps() - 1 ? (
                  <CheckCircleIcon style={{ color: "green" }} />
                ) : (
                  <SkipNextIcon style={{ color: "#1b5e20" }} />
                )}
              </Button>
            </Box>
          </div>
        )}
      </div>
    </Grid>
  );
}




import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import {
  Grid,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  Paper,
  TableBody,
  Button,
  CircularProgress,
  TextField,
} from "@material-ui/core";
import Modal from "@material-ui/core/Modal";
import Backdrop from "@material-ui/core/Backdrop";
import Fade from "@material-ui/core/Fade";
import AddBoxIcon from "@material-ui/icons/AddBox";
import DeleteIcon from "@material-ui/icons/Delete";
import EditIcon from "@material-ui/icons/Edit";
import { Alert, AlertTitle } from "@mui/lab";
import Widget from "../../components/Widget/Widget";
import numStr from "../../components/utils/convertFloate"; 
import { format } from  "date-fns";

const AfterDescriptif = ({ props }) => {
  const useStyles = makeStyles((theme) => ({
    modal: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    paper: {
      backgroundColor: theme.palette.background.paper,
      border: "1px solid #4caf50",
      boxShadow: theme.shadows[5],
      padding: theme.spacing(2, 4, 3),
    },
    root: {
      '& > *': {
        margin: theme.spacing(1),
        width: '25ch',
      },
    },
  }));

  const classes = useStyles();

  const [open, setOpen] = useState(false);
  const [editRow, setEditRow] = useState(null);
  const [data, setData] = useState(props.before);

  const handleModalOpen = () => {
    setEditRow(null);
    setOpen(true);
  };

  const updateRow = (row) => {
    setEditRow(row);
    setOpen(true);
  };

  const deleteRow = (row) => {
    const newData = data.filter((line) => line !== row);
    setData(newData);
    setOpen(false);
  };

  const handleModalClose = () => {
    setOpen(false);
    setEditRow(null);
  };

  const [nature, setNature] = useState("");
  const [compte, setCompte] = useState("");
  const [autorisation, setAutorisation] = useState("");
  const [encour, setEncour] = useState("");
  const [devise, setDevise] = useState("");
  const [delais, setDelais] = useState("");


  const formDate = (MyDate) =>{
    const date = new Date(MyDate);
    return format(date, "dd/MM/yyyy")
  }
  const handleChangeNatureLigne = (e) => {
    setNature(e.target.value);
  };

  const handleChangeNumberCompte = (e) => {
    setCompte(e.target.value);
  };

  const handleChangeAutorisation = (e) => {
    setAutorisation(e.target.value);
  };

  const handleChangeEncour = (e) => {
    setEncour(e.target.value);
  };

  const handleChangeDevise= (e) => {
    setDevise(e.target.value);
  };

  const handleChangeMaturityDate = (e) => {
    setDelais(e.target.value);
  };

  const handleFormSubmit = (values) => {
    const parsedValues = {
      title: values['Nature de ligne'],
      account_number: values['Numero compte'],
      autorisation_amount: numStr(values['Autorisation']) || 0,
      outstanding_amount: numStr(values['En cours']) || 0,
      devise: values['Devise'],
      maturity_date: values['Délais de maturité'],
    };

    if (editRow) {
      const newData = data.map((line) =>
        line === editRow ? { ...line, ...parsedValues } : line
      );
      setData(newData);
    } else {
      setData([...data, parsedValues]);
    }
    handleModalClose();
  };

  return (
    <Grid container item xs={12} rowSpacing={2} spacing={2}>
      <Grid container spacing={4}>
        <Grid item xs={12} md={12}>
          <Widget
            title="Autorisations avant demande"
            upperTitle
            className={classes.card}
            bodyClass={classes.fullHeightBody}
          >
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} aria-label="caption table">
                <caption>
                  <Button
                    onClick={handleModalOpen}
                    variant="contained"
                    style={{
                      color: "white",
                      backgroundColor: "#ff5722",
                    }}
                  >
                    <AddBoxIcon style={{ color: "white" }} /> Ajouter une ligne
                  </Button>
                </caption>
                <TableHead>
                  <TableRow>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Nature ligne</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Numero compte</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Autorisation</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>En cours</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Devise</b>
                    </TableCell>

                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Delais de Maturité</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Action</b>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {props.load ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <CircularProgress thickness={2} size={80} />
                      </TableCell>
                    </TableRow>
                  ) : data !== undefined ? (
                    data.map((avant) => (
                      <TableRow key={avant.id}>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}> {avant.title}</b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {" "}
                            {avant.account_number}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {numStr(avant.autorisation_amount) ? numStr(avant.autorisation_amount) : "0"}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {numStr(avant.outstanding_amount)}{" "}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#dd2c00" }}>{avant.devise} </b>
                        </TableCell>
                      
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {avant.maturity_date ? formDate(avant.maturity_date):"aucune date"}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          <Button onClick={() => deleteRow(avant)}>
                            <DeleteIcon style={{ color: "red" }} />
                          </Button>
                          <Button onClick={() => updateRow(avant)}>
                            <EditIcon style={{ color: "green" }} />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Alert severity="error">
                          <AlertTitle>Error</AlertTitle>
                          <strong> Sorry!! Aucune information liée au client</strong>
                        </Alert>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            <Modal
              aria-labelledby="transition-modal-title"
              aria-describedby="transition-modal-description"
              className={classes.modal}
              open={open}
              onClose={handleModalClose}
              closeAfterTransition
              BackdropComponent={Backdrop}
              BackdropProps={{
                timeout: 500,
              }}
            >
              <Fade in={open}>
                <div className={classes.paper}>
                  <h2>{editRow ? "Modification de la ligne " + "" + editRow.title : "Ajouter une nouvelle ligne"}</h2>
                  <form
                    className={classes.root}
                    onSubmit={(e) => {
                      e.preventDefault();
                      const formData = new FormData(e.target);
                      const val = {};
                      formData.forEach((value, key) => {
                        val[key] = value;
                      });
                      handleFormSubmit(val);
                    }}
                  >
                    <TextField
                      name="Nature de ligne"
                      id="outlined-basic"
                      label="Nature de ligne"
                      defaultValue={editRow ? editRow.title : ""}
                      variant="outlined"
                      required="true"
                      value={nature}
                      onChange={handleChangeNatureLigne}
                    />
                  <TextField
                      id="outlined-basic"
                      name="Numero compte"
                      label="Numero compte"
                      defaultValue={editRow ? editRow.account_number : ""}
                      variant="outlined"
                      required="true"
                      value={compte}
                      onChange={handleChangeNumberCompte}

                    />
                     <TextField
                      id="outlined-basic"
                      name="Autorisation"
                      label="Autorisation"
                      defaultValue={editRow ? editRow.autorisation_amount : ""}
                      variant="outlined"
                      required="true"
                      value={autorisation}
                      onChange={handleChangeAutorisation}

                    />
                       <TextField
                      id="outlined-basic"
                      name="En cours"
                      label="En cours"
                      variant="outlined"
                      defaultValue={editRow ? editRow.outstanding_amount : ""}
                      required="true"
                      value={encour}
                      onChange={handleChangeEncour}

                    />
                      <TextField
                      id="outlined-basic"
                      name="Devise"
                      label="Devise"
                      variant="outlined"
                      defaultValue={editRow ? editRow.devise : ""}
                      required="true"
                      value={devise}
                      onChange={handleChangeDevise}

                    />
                    <TextField
                      id="outlined-basic"
                      name="Délais de maturité"
                      required="true"
                      type="date"
                      defaultValue={editRow ? editRow.maturity_date : ""}
                      variant="outlined"
                      value={delais}
                      onChange={handleChangeMaturityDate}
                    />
                    <Button style={{ background: "#33691e", color: "white" }} type="submit" variant="contained">
                      {editRow ? "Modifier" : "Ajouter"}
                    </Button>
                  </form>
                </div>
              </Fade>
            </Modal>
          </Widget>
        </Grid>
      </Grid>
    </Grid>
  );
};

export default AfterDescriptif;





// ... (votre import et votre code existant)

const AfterDescriptif = ({ props }) => {
  // ... (votre code existant)

  const handleFormSubmit = async (values) => {
    const parsedValues = {
      title: values["Nature de ligne"],
      account_number: values["Numero compte"],
      autorisation_amount: numStr(values["Autorisation"]) || 0,
      outstanding_amount: numStr(values["En cours"]) || 0,
      devise: values["Devise"],
      maturity_date: values["Délais de maturité"],
    };

    if (editRow) {
      const newData = data.map((line) =>
        line === editRow ? { ...line, ...parsedValues } : line
      );
      setData(newData);
    } else {
      setData([...data, parsedValues]);
    }

    handleModalClose();
  };

  const sendUpdatedDataToAPI = async () => {
    try {
      // Filter out any rows that haven't been modified
      const modifiedData = data.filter((row) => row.isModified);

      // Send modified data to the API
      const response = await fetch("https://votre-api-endpoint", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(modifiedData),
      });

      if (!response.ok) {
        throw new Error("Error sending modified data to the API");
      }

      // Clear the "isModified" flag for all rows
      const updatedData = data.map((row) => ({ ...row, isModified: false }));
      setData(updatedData);

      console.log("Data sent to API successfully");
    } catch (error) {
      console.error("Error:", error.message);
    }
  };

  return (
    // ... (votre code existant)
  );
};

export default AfterDescriptif;

