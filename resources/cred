 const handleSendInside = async (datas) => {
    setLoading(true);
    const newData = datas.filter((row) => row.isModified);
    await axios
      .post(
        "/api/commitment/before_insight/set",
        newData,
        {
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": getCookie("csrf_refresh_token"),
          },
        },
      )
      .then((response) => {
        console.log("reponse de l'api before_insight_set: ", response);
        const data = response;
       
      })
      .catch((error) => {
        console.log("Error lors du traitement de before inside:", error);
        setError(error.response?.data || "Oups!!!! une erreur s'est produite");
      })
      .finally(() => {
        setLoading(false);
      });
  };




import React, { useState } from "react";
import { makeStyles } from "@material-ui/core/styles";
import {
  Grid,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  Paper,
  TableBody,
  Button,
  CircularProgress,
  TextField,
} from "@material-ui/core";
import Modal from "@material-ui/core/Modal";
import Backdrop from "@material-ui/core/Backdrop";
import Fade from "@material-ui/core/Fade";
import AddBoxIcon from "@material-ui/icons/AddBox";
import DeleteIcon from "@material-ui/icons/Delete";
import EditIcon from "@material-ui/icons/Edit";
import { Alert, AlertTitle } from "@mui/lab";
import Widget from "../../components/Widget/Widget";
import numStr from "../../components/utils/convertFloate"; 
import { format } from  "date-fns";

const AfterDescriptif = ({ props }) => {
  const useStyles = makeStyles((theme) => ({
    modal: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
    },
    paper: {
      backgroundColor: theme.palette.background.paper,
      border: "1px solid #4caf50",
      boxShadow: theme.shadows[5],
      padding: theme.spacing(2, 4, 3),
    },
    root: {
      '& > *': {
        margin: theme.spacing(1),
        width: '25ch',
      },
    },
  }));

  const classes = useStyles();

  const [open, setOpen] = useState(false);
  const [editRow, setEditRow] = useState(null);
  const [data, setData] = useState(props.before);

  const handleModalOpen = () => {
    setEditRow(null);
    setOpen(true);
  };

  const updateRow = (row) => {
    setEditRow(row);
    setOpen(true);
  };

  const deleteRow = (row) => {
    const newData = data.filter((line) => line !== row);
    setData(newData);
    setOpen(false);
  };

  const handleModalClose = () => {
    setOpen(false);
    setEditRow(null);
  };

  const [nature, setNature] = useState("");
  const [compte, setCompte] = useState("");
  const [autorisation, setAutorisation] = useState("");
  const [encour, setEncour] = useState("");
  const [devise, setDevise] = useState("");
  const [delais, setDelais] = useState("");


  const formDate = (MyDate) =>{
    const date = new Date(MyDate);
    return format(date, "dd/MM/yyyy")
  }
  const handleChangeNatureLigne = (e) => {
    setNature(e.target.value);
  };

  const handleChangeNumberCompte = (e) => {
    setCompte(e.target.value);
  };

  const handleChangeAutorisation = (e) => {
    setAutorisation(e.target.value);
  };

  const handleChangeEncour = (e) => {
    setEncour(e.target.value);
  };

  const handleChangeDevise= (e) => {
    setDevise(e.target.value);
  };

  const handleChangeMaturityDate = (e) => {
    setDelais(e.target.value);
  };

  const handleFormSubmit = (values) => {
    const parsedValues = {
      title: values['Nature de ligne'],
      account_number: values['Numero compte'],
      autorisation_amount: numStr(values['Autorisation']) || 0,
      outstanding_amount: numStr(values['En cours']) || 0,
      devise: values['Devise'],
      maturity_date: values['Délais de maturité'],
    };

    if (editRow) {
      const newData = data.map((line) =>
        line === editRow ? { ...line, ...parsedValues } : line
      );
      setData(newData);
    } else {
      setData([...data, parsedValues]);
    }
    handleModalClose();
  };

  return (
    <Grid container item xs={12} rowSpacing={2} spacing={2}>
      <Grid container spacing={4}>
        <Grid item xs={12} md={12}>
          <Widget
            title="Autorisations avant demande"
            upperTitle
            className={classes.card}
            bodyClass={classes.fullHeightBody}
          >
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} aria-label="caption table">
                <caption>
                  <Button
                    onClick={handleModalOpen}
                    variant="contained"
                    style={{
                      color: "white",
                      backgroundColor: "#ff5722",
                    }}
                  >
                    <AddBoxIcon style={{ color: "white" }} /> Ajouter une ligne
                  </Button>
                </caption>
                <TableHead>
                  <TableRow>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Nature ligne</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Numero compte</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Autorisation</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>En cours</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Devise</b>
                    </TableCell>

                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Delais de Maturité</b>
                    </TableCell>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                      <b>Action</b>
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {props.load ? (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <CircularProgress thickness={2} size={80} />
                      </TableCell>
                    </TableRow>
                  ) : data !== undefined ? (
                    data.map((avant) => (
                      <TableRow key={avant.id}>
                    <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}> {avant.title}</b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {" "}
                            {avant.account_number}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {numStr(avant.autorisation_amount) ? numStr(avant.autorisation_amount) : "0"}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {numStr(avant.outstanding_amount)}{" "}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#dd2c00" }}>{avant.devise} </b>
                        </TableCell>
                      
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          {" "}
                          <b style={{ color: "#455a64" }}>
                            {avant.maturity_date ? formDate(avant.maturity_date):"aucune date"}
                          </b>
                        </TableCell>
                        <TableCell align="left" style={{ fontSize: "12px" }}>
                          <Button onClick={() => deleteRow(avant)}>
                            <DeleteIcon style={{ color: "red" }} />
                          </Button>
                          <Button onClick={() => updateRow(avant)}>
                            <EditIcon style={{ color: "green" }} />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} align="center">
                        <Alert severity="error">
                          <AlertTitle>Error</AlertTitle>
                          <strong> Sorry!! Aucune information liée au client</strong>
                        </Alert>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            <Modal
              aria-labelledby="transition-modal-title"
              aria-describedby="transition-modal-description"
              className={classes.modal}
              open={open}
              onClose={handleModalClose}
              closeAfterTransition
              BackdropComponent={Backdrop}
              BackdropProps={{
                timeout: 500,
              }}
            >
              <Fade in={open}>
                <div className={classes.paper}>
                  <h2>{editRow ? "Modification de la ligne " + "" + editRow.title : "Ajouter une nouvelle ligne"}</h2>
                  <form
                    className={classes.root}
                    onSubmit={(e) => {
                      e.preventDefault();
                      const formData = new FormData(e.target);
                      const val = {};
                      formData.forEach((value, key) => {
                        val[key] = value;
                      });
                      handleFormSubmit(val);
                    }}
                  >
                    <TextField
                      name="Nature de ligne"
                      id="outlined-basic"
                      label="Nature de ligne"
                      defaultValue={editRow ? editRow.title : ""}
                      variant="outlined"
                      required="true"
                      value={nature}
                      onChange={handleChangeNatureLigne}
                    />
                  <TextField
                      id="outlined-basic"
                      name="Numero compte"
                      label="Numero compte"
                      defaultValue={editRow ? editRow.account_number : ""}
                      variant="outlined"
                      required="true"
                      value={compte}
                      onChange={handleChangeNumberCompte}

                    />
                     <TextField
                      id="outlined-basic"
                      name="Autorisation"
                      label="Autorisation"
                      defaultValue={editRow ? editRow.autorisation_amount : ""}
                      variant="outlined"
                      required="true"
                      value={autorisation}
                      onChange={handleChangeAutorisation}

                    />
                       <TextField
                      id="outlined-basic"
                      name="En cours"
                      label="En cours"
                      variant="outlined"
                      defaultValue={editRow ? editRow.outstanding_amount : ""}
                      required="true"
                      value={encour}
                      onChange={handleChangeEncour}

                    />
                      <TextField
                      id="outlined-basic"
                      name="Devise"
                      label="Devise"
                      variant="outlined"
                      defaultValue={editRow ? editRow.devise : ""}
                      required="true"
                      value={devise}
                      onChange={handleChangeDevise}

                    />
                    <TextField
                      id="outlined-basic"
                      name="Délais de maturité"
                      required="true"
                      type="date"
                      defaultValue={editRow ? editRow.maturity_date : ""}
                      variant="outlined"
                      value={delais}
                      onChange={handleChangeMaturityDate}
                    />
                    <Button style={{ background: "#33691e", color: "white" }} type="submit" variant="contained">
                      {editRow ? "Modifier" : "Ajouter"}
                    </Button>
                  </form>
                </div>
              </Fade>
            </Modal>
          </Widget>
        </Grid>
      </Grid>
    </Grid>
  );
};

export default AfterDescriptif;





// ... (votre import et votre code existant)

const AfterDescriptif = ({ props }) => {
  // ... (votre code existant)

  const handleFormSubmit = async (values) => {
    const parsedValues = {
      title: values["Nature de ligne"],
      account_number: values["Numero compte"],
      autorisation_amount: numStr(values["Autorisation"]) || 0,
      outstanding_amount: numStr(values["En cours"]) || 0,
      devise: values["Devise"],
      maturity_date: values["Délais de maturité"],
    };

    if (editRow) {
      const newData = data.map((line) =>
        line === editRow ? { ...line, ...parsedValues } : line
      );
      setData(newData);
    } else {
      setData([...data, parsedValues]);
    }

    handleModalClose();
  };

  const sendUpdatedDataToAPI = async () => {
    try {
      // Filter out any rows that haven't been modified
      const modifiedData = data.filter((row) => row.isModified);

      // Send modified data to the API
      const response = await fetch("https://votre-api-endpoint", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(modifiedData),
      });

      if (!response.ok) {
        throw new Error("Error sending modified data to the API");
      }

      // Clear the "isModified" flag for all rows
      const updatedData = data.map((row) => ({ ...row, isModified: false }));
      setData(updatedData);

      console.log("Data sent to API successfully");
    } catch (error) {
      console.error("Error:", error.message);
    }
  };

  return (
    // ... (votre code existant)
  );
};

export default AfterDescriptif;

